{"ast":null,"code":"import axios from \"axios\";\nconst instance = axios.create({\n  withCredentials: true,\n  baseURL: 'https://social-network.samuraijs.com/api/1.0/',\n  headers: {\n    'api-key': 'c150cbee-d79e-4ae8-9ce1-bf6aa6943529'\n  }\n});\nexport const authAPI = {\n  getAuthUser() {\n    return instance.get(`auth/me`).then(response => {\n      return response.data;\n    });\n  },\n\n  login(email, password) {\n    let rememberMe = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    return instance.post(`auth/login`, {\n      email,\n      password,\n      rememberMe\n    }).then(response => {\n      return response.data;\n    });\n  },\n\n  logout() {\n    return instance.delete(`auth/login`).then(response => {\n      return response.data;\n    });\n  }\n\n};\nexport const usersAPI = {\n  getUsers() {\n    let currentPage = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n    let pageSize = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 10;\n    return instance.get(`users?page=${currentPage}&count=${pageSize}`).then(response => {\n      return response.data;\n    });\n  },\n\n  follow(userId) {\n    return instance.post(`follow/${userId}`).then(response => {\n      return response.data;\n    });\n  },\n\n  unfollow(userId) {\n    return instance.delete(`follow/${userId}`).then(response => {\n      return response.data;\n    });\n  }\n\n};\nexport const profileAPI = {\n  getUserProfile(userId) {\n    return instance.get(`profile/${userId}`).then(response => {\n      return response.data;\n    });\n  },\n\n  getUserStatus(userId) {\n    return instance.get(`profile/status/${userId}`).then(response => {\n      return response.data;\n    });\n  },\n\n  updateStatus(status) {\n    return instance.put(`profile/status`, {\n      status\n    }).then(response => {\n      return response.data;\n    });\n  }\n\n};","map":{"version":3,"names":["axios","instance","create","withCredentials","baseURL","headers","authAPI","getAuthUser","get","then","response","data","login","email","password","rememberMe","post","logout","delete","usersAPI","getUsers","currentPage","pageSize","follow","userId","unfollow","profileAPI","getUserProfile","getUserStatus","updateStatus","status","put"],"sources":["/Users/muradgakhramanov/Desktop/MyProject/social_net/src/api/api.js"],"sourcesContent":["import axios from \"axios\";\n\nconst instance = axios.create({\n    withCredentials: true,\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\n    headers: {\n        'api-key': 'c150cbee-d79e-4ae8-9ce1-bf6aa6943529',\n    }\n})\n\nexport const authAPI = {\n    getAuthUser() {\n        return  instance.get(`auth/me`).then(response => {\n            return response.data;\n        })\n    },\n    login(email, password, rememberMe = false) {\n        return  instance.post(`auth/login`, {email, password, rememberMe}).then(response => {\n            return response.data;\n        })\n    },\n    logout() {\n        return  instance.delete(`auth/login`).then(response => {\n            return response.data;\n        })\n    },\n}\n\nexport const usersAPI = {\n    getUsers(currentPage = 1, pageSize = 10) {\n        return instance.get(`users?page=${currentPage}&count=${pageSize}`).then(response => {\n            return response.data;\n        })\n    },\n    follow(userId) {\n        return instance.post(`follow/${userId}`).then(response => {\n            return response.data;\n        })\n    },\n    unfollow(userId) {\n        return instance.delete(`follow/${userId}`).then(response => {\n            return response.data;\n        })\n    },\n}\n\nexport const profileAPI = {\n    getUserProfile(userId) {\n        return instance.get(`profile/${userId}`).then(response => {\n            return response.data;\n        })\n    },\n    getUserStatus(userId) {\n        return instance.get(`profile/status/${userId}`).then(response => {\n            return response.data;\n        })\n    },\n    updateStatus(status) {\n        return instance.put(`profile/status`, {status}).then(response => {\n            return response.data;\n        })\n    },\n}"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,MAAMC,QAAQ,GAAGD,KAAK,CAACE,MAAN,CAAa;EAC1BC,eAAe,EAAE,IADS;EAE1BC,OAAO,EAAE,+CAFiB;EAG1BC,OAAO,EAAE;IACL,WAAW;EADN;AAHiB,CAAb,CAAjB;AAQA,OAAO,MAAMC,OAAO,GAAG;EACnBC,WAAW,GAAG;IACV,OAAQN,QAAQ,CAACO,GAAT,CAAc,SAAd,EAAwBC,IAAxB,CAA6BC,QAAQ,IAAI;MAC7C,OAAOA,QAAQ,CAACC,IAAhB;IACH,CAFO,CAAR;EAGH,CALkB;;EAMnBC,KAAK,CAACC,KAAD,EAAQC,QAAR,EAAsC;IAAA,IAApBC,UAAoB,uEAAP,KAAO;IACvC,OAAQd,QAAQ,CAACe,IAAT,CAAe,YAAf,EAA4B;MAACH,KAAD;MAAQC,QAAR;MAAkBC;IAAlB,CAA5B,EAA2DN,IAA3D,CAAgEC,QAAQ,IAAI;MAChF,OAAOA,QAAQ,CAACC,IAAhB;IACH,CAFO,CAAR;EAGH,CAVkB;;EAWnBM,MAAM,GAAG;IACL,OAAQhB,QAAQ,CAACiB,MAAT,CAAiB,YAAjB,EAA8BT,IAA9B,CAAmCC,QAAQ,IAAI;MACnD,OAAOA,QAAQ,CAACC,IAAhB;IACH,CAFO,CAAR;EAGH;;AAfkB,CAAhB;AAkBP,OAAO,MAAMQ,QAAQ,GAAG;EACpBC,QAAQ,GAAiC;IAAA,IAAhCC,WAAgC,uEAAlB,CAAkB;IAAA,IAAfC,QAAe,uEAAJ,EAAI;IACrC,OAAOrB,QAAQ,CAACO,GAAT,CAAc,cAAaa,WAAY,UAASC,QAAS,EAAzD,EAA4Db,IAA5D,CAAiEC,QAAQ,IAAI;MAChF,OAAOA,QAAQ,CAACC,IAAhB;IACH,CAFM,CAAP;EAGH,CALmB;;EAMpBY,MAAM,CAACC,MAAD,EAAS;IACX,OAAOvB,QAAQ,CAACe,IAAT,CAAe,UAASQ,MAAO,EAA/B,EAAkCf,IAAlC,CAAuCC,QAAQ,IAAI;MACtD,OAAOA,QAAQ,CAACC,IAAhB;IACH,CAFM,CAAP;EAGH,CAVmB;;EAWpBc,QAAQ,CAACD,MAAD,EAAS;IACb,OAAOvB,QAAQ,CAACiB,MAAT,CAAiB,UAASM,MAAO,EAAjC,EAAoCf,IAApC,CAAyCC,QAAQ,IAAI;MACxD,OAAOA,QAAQ,CAACC,IAAhB;IACH,CAFM,CAAP;EAGH;;AAfmB,CAAjB;AAkBP,OAAO,MAAMe,UAAU,GAAG;EACtBC,cAAc,CAACH,MAAD,EAAS;IACnB,OAAOvB,QAAQ,CAACO,GAAT,CAAc,WAAUgB,MAAO,EAA/B,EAAkCf,IAAlC,CAAuCC,QAAQ,IAAI;MACtD,OAAOA,QAAQ,CAACC,IAAhB;IACH,CAFM,CAAP;EAGH,CALqB;;EAMtBiB,aAAa,CAACJ,MAAD,EAAS;IAClB,OAAOvB,QAAQ,CAACO,GAAT,CAAc,kBAAiBgB,MAAO,EAAtC,EAAyCf,IAAzC,CAA8CC,QAAQ,IAAI;MAC7D,OAAOA,QAAQ,CAACC,IAAhB;IACH,CAFM,CAAP;EAGH,CAVqB;;EAWtBkB,YAAY,CAACC,MAAD,EAAS;IACjB,OAAO7B,QAAQ,CAAC8B,GAAT,CAAc,gBAAd,EAA+B;MAACD;IAAD,CAA/B,EAAyCrB,IAAzC,CAA8CC,QAAQ,IAAI;MAC7D,OAAOA,QAAQ,CAACC,IAAhB;IACH,CAFM,CAAP;EAGH;;AAfqB,CAAnB"},"metadata":{},"sourceType":"module"}